module sdf2imp/project/create-example-trans

imports
  sdf2imp/util/-

strategies

  trans-module-name =
     get-sdf-main-module;
     lower-case;
     cify
  
  create-example-trans =
    <file-exists> <conc-strings> ("trans/", <trans-module-name>, ".str")
  <+
    name     := <trans-module-name>;
    sdf-name := <get-sdf-main-module>;
    
<output-text-file(|["trans"], $[[name].str])>
${module {name}

imports
	
	libstratego-lib
	libstratego-gpp
	libstratego-aterm
	include/{sdf-name}
	editor/{sdf-name}-Outliner
	lib/editor-common.generated
	lib/runtime/index/-
	lib/runtime/nabl/-
	lib/runtime/properties/-
	lib/runtime/types/-
	lib/runtime/task/-
	lib/runtime/analysis/-
	lib/runtime/editor/-
	names
	check
	generate
	pp

rules // Analysis
	
	editor-analyze = analysis-default-editor
	
	analysis-single-default-interface = 
		analysis-single-default(id, id, id|<language>)
	analysis-multiple-default-interface = 
		analysis-multiple-default(parse-file <+ !(), id, id, id|<language>, <project-path>)
	
	editor-save = analysis-save-default(|<language>)

rules // Editor services
	
	// Resolves a reference when the user control-clicks or presses F3 in the editor.
	editor-resolve:
		(node, position, ast, path, project-path) -> definition
		where
			definition := <analysis-resolve(|<language>, project-path)> node

	// Returns "hover help" information for a particular node in the editor.
	// For references, this rule is invoked using the resolved term.
	editor-hover:
		(target, position, ast, path, project-path) ->
			<get-editor-properties(pp-partial-{sdf-name}-string |<language>, project-path);properties-to-html>target

	// Gathers the outline nodes for the outline view.
	editor-outline:
		(node, position, ast, path, project-path) -> outline
		where
			outline := <simple-label-outline(to-outline-label)> ast

	// Gathers the properties for the properties view.
	editor-properties:
		(target, position, ast, path, project-path) ->
			<get-all-editor-properties(pp-partial-{sdf-name}-string |<language>, project-path)>target

	// Completes an identifier when the user presses control-space
	// (the completion identifier in the AST provides additional context information)
	editor-complete:
		(node, position, ast, path, project-path) -> proposals
		where
			proposals := <analysis-propose-completions(|<language>, project-path)> ast
	
	// Formats the program using a pretty printer.	
  editor-format:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
    	ext      := <get-extension> path;
      filename := <guarantee-extension(|$[pp.[ext]])> path;
      result   := <pp-debug> selected

rules // Debugging
	
	// Prints the abstract syntax ATerm of a selection.
	debug-show-aterm:
		(selected, position, ast, path, project-path) -> (filename, result)
		with
			filename := <guarantee-extension(|"aterm")> path;
			result	 := selected
			
	// Prints the analyzed annotated abstract syntax ATerm of a selection.
	debug-show-analyzed:
		(selected, position, ast, path, project-path) -> (filename, result)
		with
			filename := <guarantee-extension(|"analyzed.aterm")> path;
			result	 := ast
			
	debug-index-project =
		analysis-debug-index-project(|<language>)
	debug-index-project-resolve = 
		analysis-debug-index-project-resolve(|<language>)
	debug-index-partition =
		analysis-debug-index-partition(|<language>)

	debug-task-project =
		analysis-debug-task-project(|<language>)
	debug-task-partition =
		analysis-debug-task-partition(|<language>)
	debug-task-selection =
		analysis-debug-task-selection(|<language>)
		
	debug-project =
		analysis-debug-project(|<language>)
	debug-partition =
		analysis-debug-partition(|<language>)
		
	debug-reanalyze = 
		analysis-debug-reanalyze(|<language>)

};

if not(<file-exists> "trans/generate.str") then
  <output-text-file(|["trans"], "generate.str")>
<(GenerateMinimal
  <
!${module generate

imports
	
	include/{sdf-name}

rules 

}
  +
!${module generate

imports

	include/{sdf-name}

rules // Builder
	
	// Generates a Java program for selected AST.
	generate-java:
		(selected, position, ast, path, project-path) -> (filename, result)
		with
			filename := <guarantee-extension(|"java")> path;
			result	 := <to-java> selected

rules // Transformation to java strings.

  to-java:
    [_] -> <concat-strings> <map(to-java)>
    
  to-java:
    () -> ""

  to-java:
    Module(x, d*) ->
    $[ package [x];
       
       [d'*]
     ]
    with
      d'* := <to-java> d*
  
  to-java:
    Entity(x, p*) ->
    $[ class [x] ${$
           [p'*]
       $}$
     ]
    with
      p'* := <to-java> p*

  to-java:
    Property(x, Type(t)) -> $[
      private [t] [x];
      
      public [t] get_[x]() ${$
          return [x];
      $}$
      
      public void set_[x] ([t] [x]) ${$
          this.[x] = [x];    
      $}$
  ]
  
  to-java:
    Type(t) -> t

  to-java:
    t* -> <map(to-java)> t*
})>
end;

if not(<file-exists> "trans/check.str") then
  <output-text-file(|["trans"], "check.str")>
  <(GenerateMinimal
  <
!${module check

imports

	include/{sdf-name}

rules // Extensions for error/warning/note reporting
	
	constraint-error:
		_ -> <fail>
 
	constraint-warning:
		_ -> <fail>
		
	constraint-note:
		_ -> <fail>

}
  +
!${module check

imports

	include/{sdf-name}
	lib/editor-common.generated

rules
	
	constraint-warning:
		Entity(x, _) -> (x, $[Entity names must start with a capital])
		where
			not(<string-starts-with-capital> x)

	constraint-note:
		Module(x @ "example", _) -> (x, $[This is just an example program in the "entities" language 
		                                  (this note is defined in trans/check.str)])

})>
end;

if not(<file-exists> "trans/pp.str") then
  <output-text-file(|["trans"], "pp.str")>
  <(GenerateMinimal
  <
!${module pp

imports

	libstratego-gpp
	lib/runtime/tmpl/pp
	Common.pp.generated
	{sdf-name}.pp.generated

rules
	
  pp-{sdf-name}-string =
    prettyprint-Start
    ; !V([], <id>)
    ; box2text-string(|120)
      
  pp-partial-{sdf-name}-string =
    prettyprint-example
    ; !V([], <id>)
    ; box2text-string(|120)
      
  pp-debug :
    ast -> result
    with
       result := <pp-{sdf-name}-string> ast
    <+ <bottomup(try(not(is-string); not(is-list); not(pp-{sdf-name}-string); debug(!"cannot pp ")))> ast
    ;  result := ""

}
  +
!${module pp

imports

	libstratego-gpp
	lib/runtime/tmpl/pp
	Common.pp.generated
	{sdf-name}.pp.generated

rules
	
  pp-{sdf-name}-string =
    prettyprint-Start
    ; !V([], <id>)
    ; box2text-string(|120)
      
  pp-partial-{sdf-name}-string =
    prettyprint-example
    ; !V([], <id>)
    ; box2text-string(|120)
      
  pp-debug :
    ast -> result
    with
       result := <pp-{sdf-name}-string> ast
    <+ <bottomup(try(not(is-string); not(is-list); not(pp-{sdf-name}-string); debug(!"cannot pp ")))> ast
    ;  result := ""

})>
end

/*
if not(<file-exists> "trans/refactor.str") then
  <output-text-file(|["trans"], "refactor.str")>
  <(GenerateMinimal
  <
!"module refactor

imports
  lib-refactoring/behavior-preservation.generated

rules // Definitions of refactorings. Referenced from Minimal-Refactorings.esv
"
  +
!"module refactor

imports
  lib-refactoring/rename-refactoring.generated
  check
  lib/nbl-library.generated

rules
  
  //multifile rename refactoring based in name index and name analysis
  rename-refactoring:
    (newname, oldname{ref}, position, ast, path, project-path) -> <generic-rename-refactoring(id, constraint-error, constraint-warning)>
")>
end;
*/

